% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/random_walk.R
\name{random_walk}
\alias{random_walk}
\title{Simulate wind diffusion}
\usage{
random_walk(x, init, iter = 100, record = iter, ratchet = FALSE)
}
\arguments{
\item{x}{a `wind_rose`.}

\item{init}{Initial conditions from which to begin diffusion, either a two-column
matrix of coordinates, or a SpatRaster layer with non-negative mass values and the
same spatial properties as `x`. If coordinates, the simulation starts with a
mass of 1 at each coordinate location. If a SpatRaster, diffusion is done
directly on the raster; this could be the result of a prior random_walk, or any
other data representing quantities to be spatially dispersed.}

\item{iter}{Number of simulation iterations (positive integer).}

\item{record}{Integer vector specifying which iterations to record. Default is to
record only the final iteration, i.e. `iter`. One raster layer is returned for
each value in `record`.}

\item{ratchet}{Whether or not to "ratchet up" values during diffusion. Default is
FALSE. See details.}
}
\description{
This function estimates diffusion across a windscape by Markov random walk. On each iteration,
the "particle mass" in each grid cell is dispersed within the local 9-cell neighborhood in
proportion with wind conductance. Depending on usage, this "mass" could represent probability,
number of individuals, etc. As the simulation proceeds, the mass diffuses across the landscape.
}
\details{
The input wind rose raster is converted to a simplex of nine probabilities for each grid
cell, giving the rates at which particles are retained in a cell or moved to each of its
eight neighbors. Probabilities of moving to a neighboring cell are proportional to conductance
in the wind rose data set, with the probabilities of remaining in a cell scaled so that the
cell with the highest conductance has a zero retention probability; this allows conductance
to be normalized locally to a simplex while remaining proportional across cells and
maximizing the dispersal occurring at each iteration.

By default, the simulation tracks the fleeting diffusion of the initial "pulse" of particle
mass, which will drift and spread like a cloud, eventually leaving the modeling domain
(unless it's a closed spatial domain). The alternative setting `ratchet = TRUE` instead
runs a propagating simulation in which local particle mass never declines, continuing to
transmit mass at the cumulative maximum rate; this may be more akin to a biological
process in which particles can reproduce locally after establishment.
}
